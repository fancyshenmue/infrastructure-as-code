#jinja2: lstrip_blocks: "True", trim_blocks: "True"
# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: {{ item.info.cluster_name | default(group_names[0]) }}
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: {{ item.info.node_name | default('${HOSTNAME}') }}
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: {{ item.info.path_data | default('/var/lib/elasticsearch') }}
#
# Path to log files:
#
path.logs: {{ item.info.path_logs | default('/var/log/elasticsearch') }}
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
bootstrap.memory_lock: {{ item.info.bootstrap_memory_lock | default('true') }}
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
network.host: {{ item.info.network_host | default('0.0.0.0') }}
#
# Set a custom port for HTTP:
#
http.port: {{ item.info.http_port | default('9200') }}
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when this node is started:
# The default list of hosts is ["127.0.0.1", "[::1]"]
#
{% if item.info.discovery_seed_hosts is defined %}
    {# discovery_seed_hosts | custom #}
    {% if item.info.discovery_seed_hosts | length > 0 %}
discovery.seed_hosts: [{% for i in item.info.discovery_seed_hosts %}"{{ i }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    {# end of discovery_seed_hosts | custom #}
    {# discovery_seed_hosts | autogen #}
    {% else %}
discovery.seed_hosts: [{% for i in groups[group_names[0]] %}"{{ hostvars[i]['ansible_hostname'] }}"{% if not loop.last %}, {% endif %}{% endfor %}]
    {% endif %}
    {# end of discovery_seed_hosts | autogen #}
{% else %}
#discovery.seed_hosts: ["host1", "host2"]
{% endif %}
#
# Bootstrap the cluster using an initial set of master-eligible nodes:
#
{% if item.info.cluster_initial_master_nodes is defined %}
cluster.initial_master_nodes: [{% for i in item.info.cluster_initial_master_nodes %}"{{ i }}"{% if not loop.last %}, {% endif %}{% endfor %}]
{% else %}
#cluster.initial_master_nodes: ["node-1", "node-2"]
{% endif %}
#
# For more information, consult the discovery and cluster formation module documentation.
#
# ---------------------------------- Gateway -----------------------------------
#
# Block initial recovery after a full cluster restart until N nodes are started:
#
#gateway.recover_after_nodes: 3
#
# For more information, consult the gateway module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Require explicit names when deleting indices:
#
#action.destructive_requires_name: true

{% if es_role is defined %}
node.roles: [{% for i in es_role %}{{ i }}{% if not loop.last %}, {% endif %}{% endfor %}]
{% endif %}
